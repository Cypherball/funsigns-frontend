[{"C:\\Users\\nitis\\Documents\\Funsigns\\funsigns-client\\src\\components\\Navigation.js":"1","C:\\Users\\nitis\\Documents\\Funsigns\\funsigns-client\\src\\components\\Pages\\Dashboard\\StudentDash.js":"2","C:\\Users\\nitis\\Documents\\Funsigns\\funsigns-client\\src\\components\\Pages\\Dashboard\\FacultyDash.js":"3","C:\\Users\\nitis\\Documents\\Funsigns\\funsigns-client\\src\\actions\\index.js":"4","C:\\Users\\nitis\\Documents\\Funsigns\\funsigns-client\\src\\components\\Pages\\Contact.js":"5","C:\\Users\\nitis\\Documents\\Funsigns\\funsigns-client\\src\\components\\AssignModal.js":"6","C:\\Users\\nitis\\Documents\\Funsigns\\funsigns-client\\src\\components\\Pages\\Login.js":"7","C:\\Users\\nitis\\Documents\\Funsigns\\funsigns-client\\src\\actions\\types.js":"8"},{"size":8129,"mtime":1610016831666,"results":"9","hashOfConfig":"10"},{"size":3664,"mtime":1610010161842,"results":"11","hashOfConfig":"10"},{"size":14876,"mtime":1610019377549,"results":"12","hashOfConfig":"10"},{"size":4291,"mtime":1610013160488,"results":"13","hashOfConfig":"10"},{"size":3371,"mtime":1609941140099,"results":"14","hashOfConfig":"10"},{"size":4760,"mtime":1610016521136,"results":"15","hashOfConfig":"10"},{"size":5149,"mtime":1610009512399,"results":"16","hashOfConfig":"10"},{"size":640,"mtime":1609963984954,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1hlqj7t",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\nitis\\Documents\\Funsigns\\funsigns-client\\src\\components\\Navigation.js",["36"],"C:\\Users\\nitis\\Documents\\Funsigns\\funsigns-client\\src\\components\\Pages\\Dashboard\\StudentDash.js",[],"C:\\Users\\nitis\\Documents\\Funsigns\\funsigns-client\\src\\components\\Pages\\Dashboard\\FacultyDash.js",[],"C:\\Users\\nitis\\Documents\\Funsigns\\funsigns-client\\src\\actions\\index.js",[],"C:\\Users\\nitis\\Documents\\Funsigns\\funsigns-client\\src\\components\\Pages\\Contact.js",["37"],"import React, { Component } from 'react'\r\nimport { Button, Container, Form } from 'react-bootstrap'\r\nimport { Form as FinalForm, Field } from 'react-final-form'\r\nimport { Link } from 'react-router-dom'\r\nimport validator from 'validator'\r\n\r\nclass Contact extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {}\r\n  }\r\n\r\n  sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms))\r\n\r\n  // Placeholder submission\r\n  onSubmit = async (values) => {\r\n    await this.sleep(300)\r\n    window.alert(JSON.stringify(values, 0, 2))\r\n  }\r\n\r\n  validate = (values) => {\r\n    const errors = {}\r\n    if (!values.email) {\r\n      errors.email = 'Email Required'\r\n    } else if (!validator.isEmail(values.email.trim())) {\r\n      errors.email = 'Invalid Email'\r\n    }\r\n    if (!values.message) {\r\n      errors.message = 'Message Required'\r\n    } else if (values.message.trim().length < 25) {\r\n      errors.message = 'Must be at least 25 characters'\r\n    }\r\n    return errors\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <section>\r\n        <Container className='d-flex flex-column justify-content-center align-items-center'>\r\n          <h1 className='mb-5'>Contact Us</h1>\r\n          <FinalForm\r\n            onSubmit={this.onSubmit}\r\n            validate={this.validate}\r\n            render={({ handleSubmit, form, submitting, pristine, values }) => (\r\n              <Form onSubmit={handleSubmit} id='login-form' className='w-100'>\r\n                <p>\r\n                  Have questions or feedbacks, or need to get in touch with us?\r\n                  Use the form below.\r\n                </p>\r\n                <Field name='email'>\r\n                  {({ input, meta }) => (\r\n                    <Form.Group>\r\n                      <Form.Control\r\n                        {...input}\r\n                        type='email'\r\n                        placeholder='Email'\r\n                        className='custom-input'\r\n                      />\r\n                      <Form.Text className='small text-danger'>\r\n                        {meta.error && meta.touched && (\r\n                          <span>{meta.error}</span>\r\n                        )}\r\n                      </Form.Text>\r\n                    </Form.Group>\r\n                  )}\r\n                </Field>\r\n                <Field name='message' component='textarea'>\r\n                  {({ input, meta }) => (\r\n                    <Form.Group>\r\n                      <Form.Control\r\n                        {...input}\r\n                        as='textarea'\r\n                        placeholder='Message'\r\n                        className='custom-input'\r\n                      />\r\n                      <Form.Text className='small text-danger'>\r\n                        {meta.error && meta.touched && (\r\n                          <span>{meta.error}</span>\r\n                        )}\r\n                      </Form.Text>\r\n                    </Form.Group>\r\n                  )}\r\n                </Field>\r\n                <Button\r\n                  variant='primary'\r\n                  className='mt-3'\r\n                  type='submit'\r\n                  block\r\n                  disabled={submitting}\r\n                >\r\n                  SEND\r\n                </Button>\r\n              </Form>\r\n            )}\r\n          />\r\n        </Container>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Contact\r\n",["38","39"],"C:\\Users\\nitis\\Documents\\Funsigns\\funsigns-client\\src\\components\\AssignModal.js",[],"C:\\Users\\nitis\\Documents\\Funsigns\\funsigns-client\\src\\components\\Pages\\Login.js",[],"C:\\Users\\nitis\\Documents\\Funsigns\\funsigns-client\\src\\actions\\types.js",[],{"ruleId":"40","severity":1,"message":"41","line":218,"column":13,"nodeType":"42","endLine":227,"endColumn":14},{"ruleId":"43","severity":1,"message":"44","line":4,"column":10,"nodeType":"45","messageId":"46","endLine":4,"endColumn":14},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-global-assign","no-unsafe-negation"]